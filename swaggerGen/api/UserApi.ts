/**
 * center API
 * Coder by Nguyen Van Luyen
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class UserApi {
    protected basePath = 'https://localhost:3000/api/v1.0/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     * @param obj User name + password
     */
    public userActiveUserPost (obj: models.UserActive, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/activeUser';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'obj' is not null or undefined
        if (obj === null || obj === undefined) {
            throw new Error('Required parameter obj was null or undefined when calling userActiveUserPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(obj);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     * @param obj User name + password
     */
    public userCreateNewPasswordPost (obj: models.CreateNewPassword, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/createNewPassword';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'obj' is not null or undefined
        if (obj === null || obj === undefined) {
            throw new Error('Required parameter obj was null or undefined when calling userCreateNewPasswordPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(obj);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     * @param obj User name + password
     */
    public userForgetPasswordPost (obj: models.ForgetPassword, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/forgetPassword';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'obj' is not null or undefined
        if (obj === null || obj === undefined) {
            throw new Error('Required parameter obj was null or undefined when calling userForgetPasswordPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(obj);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     */
    public userGetAllUserGet (extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/getAllUser';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     */
    public userGetMeDataGet (extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/getMeData';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     * @param obj User name + password
     */
    public userLoginPost (obj: models.Login, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/login';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'obj' is not null or undefined
        if (obj === null || obj === undefined) {
            throw new Error('Required parameter obj was null or undefined when calling userLoginPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(obj);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Endpoint to get token with username &amp; password
     * @param obj User name + password
     */
    public userRegisterPost (obj: models.Authenticaion, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/user/register';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'obj' is not null or undefined
        if (obj === null || obj === undefined) {
            throw new Error('Required parameter obj was null or undefined when calling userRegisterPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(obj);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
